library(mvtnorm)


# build f
theta = list(mu1=0, sd1=1, mu2=0, sd2=1, alpha=0.5)

margins = function(y, theta, ...) {
    mu = c(theta$mu1, theta$mu2)
    sd = c(theta$sd1, theta$sd2)
    cbind(dnorm(y, mu, sd),
          pnorm(y, mu, sd))
}

copula = normalCopula(theta$alpha)
f = buildf(margins, copula, which(names(theta) == 'alpha'))

# contour plot
y1 = seq(theta$mu1 - 2*theta$sd1, theta$mu1 + 2*theta$sd1, length.out=51) # TODO remove base::
y2 = seq(theta$mu2 - 2*theta$sd2, theta$mu2 + 2*theta$sd2, length.out=51) # TODO remove base::
z = outer(y1, y2, function(e1, e2, theta) apply(cbind(e1, e2), 1, f, theta), theta)
contour(y1, y2, z)

tt = sqrt(c(theta$sd1, theta$sd2))
zz = outer(y1, y2, function(e1, e2) dmvnorm(cbind(e1, e2), c(theta$mu1, theta$mu2), sigma=tt%*%t(tt) * getSigma(copula)))
contour(y1, y2, zz, col=rgb(1, 0, 0, 0.5), add=T)


#assign('nint_integrateNCube', nint_integrateNCube_integrate, envir=environment(nint_integrateNCube))

nint_integrateSpace(f, nint_space(nint_intvDim(-Inf, Inf), nint_intvDim(-Inf, Inf)), theta, infLimits=T)


s = nint_space(nint_intvDim(-Inf, Inf), nint_intvDim(-Inf, Inf))
g = nint_reduceInf(f, nint_integralData(s))$f

x1 = seq(-1, 1, length.out=51)
x2 = seq(-1, 1, length.out=51)
z = outer(x1, x2, function(e1, e2) apply(cbind(e1, e2), 1, g, theta))
contour(x1, x2, z)



eta1 = quote(beta1 + beta2 * x + beta3 * x**2)
eta2 = quote(beta4 * x + beta5 * x**3 + beta6 * x**4)
margins = list(list(pdf=substitute(dnorm(y1, mu, 1), list(mu=eta1)),
                    cdf=substitute(pnorm(y1, mu, 1), list(mu=eta1))),
               list(pdf=substitute(dnorm(y2, mu, 1), list(mu=eta2)),
                    cdf=substitute(pnorm(y2, mu, 1), list(mu=eta2))))
margins

f = buildf(margins, claytonCopula())
f


assign('pnorm', alist(q=dnorm(q, mean, sd), mean=-dnorm(q, mean, sd), sd=dnorm(q, mean, sd)*(mean - q)/sd), envir=Deriv::drule)

d = Deriv2Logf(f, c('beta1', 'beta2'))


f = parse(text='(1 + ((pnorm(y1, beta1 + beta2 * x + beta3 * x^2, 1))^(-alpha) - 
    1 + (pnorm(y2, beta4 * x + beta5 * x^3 + beta6 * x^4, 1))^(-alpha) - 
    1))^(((-1/alpha) - 1) - 1) * (((-1/alpha) - 1) * ((pnorm(y2, 
    beta4 * x + beta5 * x^3 + beta6 * x^4, 1))^((-alpha) - 1) * 
    (-alpha))) * ((-1/alpha) * ((pnorm(y1, beta1 + beta2 * x + 
    beta3 * x^2, 1))^((-alpha) - 1) * (-alpha))) * (1 * (dnorm(y1, 
    beta1 + beta2 * x + beta3 * x^2, 1)) * (dnorm(y2, beta4 * 
    x + beta5 * x^3 + beta6 * x^4, 1)))')[[1]]
eval(f, list(y1=0, y2=0, beta1=1, beta2=1, beta3=1, beta4=1, beta5=1, beta6=1, x=0, alpha=0.5))

Deriv::Deriv(f, 'beta1')
Deriv::Simplify(f)
Deriv::Deriv(Deriv::Simplify(f), 'beta1')
Deriv::Deriv(Deriv::Deriv(f, 'beta1'), 'beta2')

Deriv::Deriv(Deriv::Deriv(quote(sin(x)), 'x'), 'x')


d = Deriv2Logf(quote(beta1 + beta2**2 + exp(beta3)), c('beta1', 'beta2'), thetaMap=list(beta1='beta1', beta2='beta2', beta3='beta3'), yMap=list(y1=1))
attr(d, 'd2')
d(0, list(beta1=1, beta2=1, beta3=1), 1, 2)


