% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/nint.R
\name{nint_transformInf}
\alias{nint_transformInf}
\title{Transform Infinite Intervals}
\usage{
nint_transformInf(f, ispace)
}
\arguments{
\item{f}{a scalar-valued function.}

\item{ispace}{an integration space.}
}
\value{
\code{nint_transformInf} returns a list containing the transformed function and transformed integration space.
}
\description{
\code{nint_transformInf} transforms (semi) infinite intervals to finite intervals.
}
\details{
Transformations: \itemize{
\item (\code{-Inf}, a): \code{x = a + 1 - 1/t} with t between 0 and 1
\item (a, \code{Inf}): \code{x = a - 1 + 1/t} with t between 0 and 1
\item (\code{-Inf}, \code{Inf}): \code{x = t/(1 - abs(t))} with t between -1 and 1
}
}
\examples{
library(docopulae)

## definition
s = nint_space(nint_intvDim(-Inf, -3),
               nint_intvDim(3, Inf))

f = function(x) prod(dnorm(x, c(-3, 3)))
nint_integrate(f, s)

## plot
y1 = seq(-5.5, -3, length.out=51)
y2 = seq(3, 5.5, length.out=51)
z = outer(y1, y2, function(y1, y2) apply(cbind(y1, y2), 1, f))
contour(y1, y2, z)

## transform
tt = nint_transformInf(f, nint_ispace(s))
tt$ispace
nint_integrate(tt$f, ispaces=list(tt$ispace))

## plot transform
u = seq(0, 1, length.out=51)
z = outer(u, u, function(u1, u2) apply(cbind(u1, u2), 1, tt$f))
contour(u, u, z)


## definition
s = nint_space(nint_intvDim(-Inf, Inf),
               nint_intvDim(-Inf, Inf))
f = function(x) dt(x[1], 1) * dt(x[2], 2) # cauchy density in x1
nint_integrate(f, s)

## plot
y = seq(-3, 3, length.out=51)
z = outer(y, y, function(y1, y2) apply(cbind(y1, y2), 1, f))
contour(y, y, z)

## transform
tt = nint_transformInf(f, nint_ispace(s))
tt$ispace
nint_integrate(tt$f, ispaces=list(tt$ispace))

## plot transform
u = seq(-1, 1, length.out=201)
z = outer(u, u, function(u1, u2) apply(cbind(u1, u2), 1, tt$f))
contour(u, u, z)


## definition
s = nint_space(nint_intvDim(-Inf, Inf))
f1 = function(x) x*dt(x, 1) # x times cauchy density
f2 = function(x) x*dt(x, 2)
nint_integrate(f1, s) # should be Inf
nint_integrate(f2, s)
# obviously does not detect divergence

## plot
curve(f2, -16, 16, col='red', ylab='f(x)', sub='x times cauchy density in black')
curve(f1, -16, 16, add=TRUE)

## transform
tt1 = nint_transformInf(f1, nint_ispace(s))
tt2 = nint_transformInf(f2, nint_ispace(s))
nint_integrate(tt1$f, ispaces=list(tt1$ispace)) # should be Inf
nint_integrate(tt2$f, ispaces=list(tt2$ispace))
# again misses divergence of cauchy expectation

## plot transform
# curve only takes vectorized functions
g1 = Vectorize(tt1$f, 'x')
g2 = Vectorize(tt2$f, 'x')
curve(g2, -1, 1, col='red', ylab='g(x)', sub='x times cauchy density in black')
curve(g1, -1, 1, add=TRUE)

# here we see the reason:
# the transformation returns 0 close to -1 and 1 (-Inf and Inf).
# in some neighborhood of those points the jacobi is infinity and numerical operations fail.
# (what is almost zero times almost infinity)
# the transformation assumes that f approaches 0 faster than 1/x**2 at (negative) infinity.
}
\seealso{
\code{\link{nint_integrate}}, \code{\link{nint_ispace}}
}

