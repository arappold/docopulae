% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/nint.R
\name{nint_integrate}
\alias{nint_integrate}
\title{Integrate}
\usage{
nint_integrate(f, space = NULL, ..., ispaces = NULL, transformInf = F)
}
\arguments{
\item{f}{the scalar-valued function (integrand) to be integrated.}

\item{space}{some space.}

\item{...}{other arguments passed to \code{f}.}

\item{ispaces}{a list of integration spaces.}

\item{transformInf}{transform infinite intervals to finite intervals? See \code{\link{nint_transformInf}}.}
}
\value{
\code{nint_integrate} returns a single numeric.
}
\description{
\code{nint_integrate} performs n-dimensional integration of some scalar-valued function over the supplied space.
}
\details{
\code{ispaces} exists for flexibility reasons.
\code{space} is transformed by \code{nint_ispace} and merged unchanged with \code{ispaces}.

\code{nint_integrate} utilizes \code{nint_integrateNCube} and \code{nint_integrateNFunc} to integrate over interval and function dimensions. See their help pages on how to replace them by different functions.
}
\examples{
library(docopulae)

## discrete
## a) scatter
s = nint_space(nint_scatDim(1:3),
               nint_scatDim(c(0, 2, 5)))
s
# (1, 0), (2, 2), (3, 5)
nint_integrate(function(x) abs(x[1] - x[2]), s) # 1 + 0 + 2 == 3

## b) grid
s = nint_space(nint_gridDim(1:3),
               nint_gridDim(c(0, 2, 5)))
s
# (1, 0), (1, 2), (1, 5), (2, 0), ..., (3, 2), (3, 5)
nint_integrate(function(x) ifelse(sum(x) < 5, 1, 0), s) # 5


## continous
## c)
s = nint_space(nint_intvDim(1, 3),
               nint_intvDim(1, Inf))
s
nint_integrate(function(x) 1/x[2]**2, s) # 2

## d) infinite, no transform
s = nint_space(nint_intvDim(-Inf, Inf))
nint_integrate(sin, s) # 0

## e) infinite, transform
s = nint_space(nint_intvDim(-Inf, Inf),
               nint_intvDim(-Inf, Inf))
nint_integrate(function(x) prod(dnorm(x)), s, transformInf=T) # 1


## functionally dependent
## f) area of triangle
s = nint_space(nint_intvDim(0, 1),
               nint_funcDim(function(x) nint_intvDim(x[1]/2, 1 - x[1]/2)))
s
nint_integrate(function(x) 1, s) # 0.5

## g) area of circle
s = nint_space(nint_intvDim(-1, 1),
               nint_funcDim(function(x) nint_intvDim(c(-1, 1) * sin(acos(x[1])) )) )
nint_integrate(function(x) 1, s) # pi

## h) volume of sphere
s = nint_space(s[[1]],
               s[[2]],
               nint_funcDim(function(x) { r = sin(acos(x[1])); nint_intvDim(c(-1, 1) * r*cos(asin(x[2] / r))) }))
nint_integrate(function(x) 1, s) # 4*pi/3
}
\seealso{
\code{\link{nint_space}}, \code{\link{nint_integrateNCube}}, \code{\link{nint_integrateNFunc}}, \code{\link{nint_ispace}}, \code{\link{nint_transformInf}}
}

